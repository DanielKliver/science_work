Привет! Для поэлементного суммирования двух массивов с использованием AVX инструкций в C++ можно воспользоваться SIMD (Single Instruction, Multiple Data) возможностями, которые позволяют обрабатывать несколько данных одновременно. Вот пример программы, которая выполняет эту задачу:

C++
Скопировать
#include <immintrin.h>
#include <iostream>

void add_arrays(const float* a, const float* b, float* result, size_t size) {
    size_t i;
    // Обработка по 8 элементов за раз с использованием AVX
    for (i = 0; i < size / 8 * 8; i += 8) {
        // Загружаем 8 элементов из каждого массива
        __m256 vec_a = _mm256_loadu_ps(&a[i]);
        __m256 vec_b = _mm256_loadu_ps(&b[i]);
        
        // Складываем векторы
        __m256 vec_result = _mm256_add_ps(vec_a, vec_b);
        
        // Сохраняем результат
        _mm256_storeu_ps(&result[i], vec_result);
    }

    // Обработка оставшихся элементов (если размер не кратен 8)
    for (; i < size; ++i) {
        result[i] = a[i] + b[i];
    }
}

int main() {
    const size_t size = 16; // Пример размера массивов
    float a[size] = {1.0f, 2.0f, 3.0f, 4.0f, 5.0f, 6.0f, 7.0f, 8.0f,
                     9.0f, 10.0f, 11.0f, 12.0f, 13.0f, 14.0f, 15.0f, 16.0f};
    float b[size] = {16.0f, 15.0f, 14.0f, 13.0f, 12.0f, 11.0f, 10.0f, 9.0f,
                     8.0f, 7.0f, 6.0f, 5.0f, 4.0f, 3.0f, 2.0f, 1.0f};
    float result[size];

    add_arrays(a, b, result, size);

    // Вывод результата
    for (size_t i = 0; i < size; ++i) {
        std::cout << "result[" << i << "] = " << result[i] << std::endl;
    }

    return 0;
}
Объяснение кода:
Заголовок <immintrin.h>: Этот заголовок необходим для использования AVX инструкций.
Функция add_arrays: Принимает два массива и их размер, выполняет поэлементное суммирование.
Используется цикл для обработки по 8 элементов за раз с помощью _mm256_loadu_ps для загрузки данных и _mm256_add_ps для сложения.
Если размер массива не кратен 8, оставшиеся элементы обрабатываются в обычном цикле.
Функция main: Инициализирует два массива, вызывает функцию сложения и выводит результат.
Этот код демонстрирует, как эффективно использовать AVX для ускорения операций с массивами. Если у тебя есть дополнительные вопросы или нужно что-то изменить, дай знать!
